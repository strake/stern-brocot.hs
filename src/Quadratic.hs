{- This file is generated by Coq extraction mechanism (v7.4), and is modified to work (i.e. type-check) with hugs98 interpreter.
   The modification where merly renaming some coq constructors in order to avoid the clash with the hugs98 Prelude constructors 
   (which are automatically exported). At the end of the file some pretty printing functions are added by hand.
                                                                               -- Milad Niqui
-}


{-# OPTIONS_GHC -Werror=missing-signatures -Wno-type-defaults #-}

module Quadratic where

import Control.Applicative
import Control.Monad (guard)
import Data.Maybe (fromMaybe)
import Data.Void
import qualified Text.ParserCombinators.ReadP as ReadP
import qualified Text.ParserCombinators.ReadPrec as ReadPrec
import Text.Read (Read (..))

__ :: a
__ = error "Logical or arity value used"

data Prod a b = Pair { ffst :: b, ssnd :: a }

data Positive = XI Positive
              | XO Positive
              | XH

data Z = ZERO
       | POS Positive
       | NEG Positive

add_un :: Positive -> Positive
add_un = \ case
    XI x' -> XO (add_un x')
    XO x' -> XI x'
    XH -> XO XH

add :: Positive -> Positive -> Positive
add x y =
  case x of
    XI x' ->
      (case y of
         XI y' -> XO (add_carry x' y')
         XO y' -> XI (add x' y')
         XH -> XO (add_un x'))
    XO x' ->
      (case y of
         XI y' -> XI (add x' y')
         XO y' -> XO (add x' y')
         XH -> XI x')
    XH ->
      (case y of
         XI y' -> XO (add_un y')
         XO y' -> XI y'
         XH -> XO XH)

add_carry :: Positive -> Positive -> Positive
add_carry x y =
  case x of
    XI x' ->
      (case y of
         XI y' -> XI (add_carry x' y')
         XO y' -> XO (add_carry x' y')
         XH -> XI (add_un x'))
    XO x' ->
      (case y of
         XI y' -> XO (add_carry x' y')
         XO y' -> XI (add x' y')
         XH -> XO (add_un x'))
    XH ->
      (case y of
         XI y' -> XI (add_un y')
         XO y' -> XO (add_un y')
         XH -> XI XH)

double_moins_un :: Positive -> Positive
double_moins_un x =
  case x of
    XI x' -> XI (XO x')
    XO x' -> XI (double_moins_un x')
    XH -> XH

ccompare :: Positive -> Positive -> Ordering -> Ordering
ccompare x y r =
  case x of
    XI x' ->
      (case y of
         XI y' -> ccompare x' y' r
         XO y' -> ccompare x' y' GT
         XH -> GT)
    XO x' ->
      (case y of
         XI y' -> ccompare x' y' LT
         XO y' -> ccompare x' y' r
         XH -> GT)
    XH -> (case y of
             XI _ -> LT
             XO _ -> LT
             XH -> r)

data Entier = Nul
            | Pos Positive

un_suivi_de, zero_suivi_de :: Entier -> Entier

un_suivi_de = \ case
    Nul -> Pos XH
    Pos p -> Pos (XI p)

zero_suivi_de = \ case
    Nul -> Nul
    Pos p -> Pos (XO p)

double_moins_deux :: Positive -> Entier
double_moins_deux = \ case
    XI x' -> Pos (XO (XO x'))
    XO x' -> Pos (XO (double_moins_un x'))
    XH -> Nul

sub_pos :: Positive -> Positive -> Entier
sub_pos x y =
  case x of
    XI x' ->
      (case y of
         XI y' -> zero_suivi_de (sub_pos x' y')
         XO y' -> un_suivi_de (sub_pos x' y')
         XH -> Pos (XO x'))
    XO x' ->
      (case y of
         XI y' -> un_suivi_de (sub_neg x' y')
         XO y' -> zero_suivi_de (sub_pos x' y')
         XH -> Pos (double_moins_un x'))
    XH ->
      (case y of
         XI y' -> Pos (double_moins_un y')
         XO y' -> double_moins_deux y'
         XH -> Nul)

sub_neg :: Positive -> Positive -> Entier
sub_neg x y =
  case x of
    XI x' ->
      (case y of
         XI y' -> un_suivi_de (sub_neg x' y')
         XO y' -> zero_suivi_de (sub_pos x' y')
         XH -> Pos (double_moins_un x'))
    XO x' ->
      (case y of
         XI y' -> zero_suivi_de (sub_neg x' y')
         XO y' -> un_suivi_de (sub_neg x' y')
         XH -> double_moins_deux x')
    XH ->
      (case y of
         XI y' -> Pos (XO y')
         XO y' -> Pos (double_moins_un y')
         XH -> Nul)

op :: Ordering -> Ordering
op = \ case
    EQ -> EQ
    LT -> GT
    GT -> LT

zplus :: Z -> Z -> Z
zplus x y = case x of
    ZERO -> y
    POS x' ->
      (case y of
         ZERO -> x
         POS y' -> POS (add x' y')
         NEG y' ->
           (case ccompare x' y' EQ of
              EQ -> ZERO
              LT -> NEG (true_sub y' x')
              GT -> POS (true_sub x' y')))
    NEG x' ->
      (case y of
         ZERO -> x
         POS y' ->
           (case ccompare x' y' EQ of
              EQ -> ZERO
              LT -> POS (true_sub y' x')
              GT -> NEG (true_sub x' y'))
         NEG y' -> NEG (add x' y'))
  where
    true_sub x0 y0 = case sub_pos x0 y0 of
        Nul -> XH
        Pos z -> z

zopp :: Z -> Z
zopp = \ case
    ZERO -> ZERO
    POS x0 -> NEG x0
    NEG x0 -> POS x0

times :: Positive -> Positive -> Positive
times x y = case x of
    XI x' -> add y (XO (times x' y))
    XO x' -> XO (times x' y)
    XH -> y

zmult :: Z -> Z -> Z
zmult x y =
  case x of
    ZERO -> ZERO
    POS x' ->
      (case y of
         ZERO -> ZERO
         POS y' -> POS (times x' y')
         NEG y' -> NEG (times x' y'))
    NEG x' ->
      (case y of
         ZERO -> ZERO
         POS y' -> NEG (times x' y')
         NEG y' -> POS (times x' y'))

instance Eq Z where
    x == y = EQ == compare x y

instance Ord Z where
    compare x y = case x of
        ZERO -> case y of
            ZERO -> EQ
            POS _ -> LT
            NEG _ -> GT
        POS x' -> case y of
            ZERO -> GT
            POS y' -> ccompare x' y' EQ
            NEG _ -> GT
        NEG x' -> case y of
            ZERO -> LT
            POS _ -> LT
            NEG y' -> op (ccompare x' y' EQ)

zsgn :: Z -> Z
zsgn = \ case
    ZERO -> ZERO
    POS _ -> POS XH
    NEG _ -> NEG XH

zabs :: Z -> Z
zabs = \ case
    ZERO -> ZERO
    POS p -> POS p
    NEG p -> POS p

zminus :: Z -> Z -> Z
zminus m n = zplus m (zopp n)

zccompare_rec :: Z -> Z -> (() -> a) -> (() -> a) -> (() -> a) -> a
zccompare_rec x y h1 h2 h3 = case compare x y of
    EQ -> h1 ()
    LT -> h2 ()
    GT -> h3 ()

z_eq_dec, z_lt_dec, z_le_dec, z_le_lt_eq_dec :: Z -> Z -> Bool
z_eq_dec x y = zccompare_rec x y (\_ -> True) (\_ -> False) (\_ -> False)
z_lt_dec x y = zccompare_rec x y (\_ -> False) (\_ -> True) (\_ -> False)
z_le_dec x y = zccompare_rec x y (\_ -> True) (\_ -> True) (\_ -> False)
z_le_lt_eq_dec x y = zccompare_rec x y (\_ -> False) (\_ -> True) (\_ -> absurd __)

z_zerop :: Z -> Bool
z_zerop = (== ZERO)

data Qpositive = NR Qpositive
               | DL Qpositive
               | One

qpositive_rec :: (Qpositive -> a -> a) -> (Qpositive -> a -> a) -> a -> Qpositive -> a
qpositive_rec f f0 f1 = \ case
    NR q0 -> f q0 (qpositive_rec f f0 f1 q0)
    DL q0 -> f0 q0 (qpositive_rec f f0 f1 q0)
    One -> f1

data Q = Zero
       | Qpos Qpositive
       | Qneg Qpositive

qpositive_eq_dec :: Qpositive -> Qpositive -> Bool
qpositive_eq_dec w w' =
  qpositive_rec (\_ h w'0 ->
    case w'0 of
      NR w'1 -> h w'1
      DL _ -> False
      One -> False) (\_ h w'0 ->
    case w'0 of
      NR _ -> False
      DL w'1 -> h w'1
      One -> False) (\w'0 ->
    case w'0 of
      NR _ -> False
      DL _ -> False
      One -> True) w w'

not_Zeq_inf :: Z -> Z -> Bool
not_Zeq_inf x y =
  case z_lt_dec x y of
    True -> True
    False ->
      (case z_le_lt_eq_dec y x of
         True -> False
         False -> absurd __)

z_dec :: Z -> Z -> Maybe Bool
z_dec x y =
  case z_lt_dec x y of
    True -> Just True
    False ->
      (case z_le_lt_eq_dec y x of
         True -> Just False
         False -> Nothing)

z_dec' :: Z -> Z -> Maybe Bool
z_dec' x y = not_Zeq_inf x y <$ guard (x /= y)

quadro_leq_inf :: Z -> Z -> Z -> Z -> Bool
quadro_leq_inf a b c d =
  case z_lt_dec a c of
    True -> False
    False -> (case z_lt_dec b d of
                True -> False
                False -> True)

zsgn_1 :: Z -> Maybe Bool
zsgn_1 x =
  case x of
    ZERO -> Just True
    POS _ -> Just False
    NEG _ -> Nothing

positive_fraction_encoding :: Z -> Z -> Qpositive
positive_fraction_encoding x y =
  case z_dec' x y of
    Just h_x_neq_y ->
      (case h_x_neq_y of
         True -> DL (positive_fraction_encoding x (zminus y x))
         False -> NR (positive_fraction_encoding (zminus x y) y))
    Nothing -> One

fraction_encoding :: Z -> Z -> Q
fraction_encoding m n =
  case z_dec (zmult (zsgn m) (zsgn n)) ZERO of
    Just s0 ->
      (case s0 of
         True -> Qneg (positive_fraction_encoding (zabs m) (zabs n))
         False -> Qpos (positive_fraction_encoding (zabs m) (zabs n)))
    Nothing -> Zero

outside_interval :: Z -> Z -> Z
outside_interval a b = zplus (zsgn a) (zsgn b)

inside_interval_1_dec_inf, inside_interval_2_dec_inf :: Z -> Z -> Bool

inside_interval_1_dec_inf a b = case (compare ZERO a, compare ZERO b) of
    (LT, LT) -> True
    (GT, GT) -> True
    _        -> False

inside_interval_2_dec_inf a b = case (compare ZERO a, compare ZERO b) of
    (LT, GT) -> True
    (GT, LT) -> True
    _        -> False

qhomographic_sign
 :: Z -> Z -> Z -> Z -> Qpositive
 -> Prod (Prod Qpositive (Prod (Prod (Prod Z Z) Z) Z)) Z
qhomographic_sign a b c d p =
  let o1 = outside_interval a b in
  let o2 = outside_interval c d in
  (case p of
     NR q ->
       (case z_zerop b of
          True ->
            (case z_zerop d of
               True -> Pair (zmult (zsgn a) (zsgn c)) (Pair (Pair a
                 (Pair b (Pair c d))) (NR q))
               False ->
                 (case z_lt_dec ZERO o2 of
                    True -> Pair (zsgn a) (Pair (Pair a (Pair b (Pair c
                      d))) (NR q))
                    False ->
                      (case z_lt_dec o2 ZERO of
                         True -> Pair (zopp (zsgn a)) (Pair (Pair a
                           (Pair b (Pair c d))) (NR q))
                         False ->
                           qhomographic_sign a (zplus a b) c
                             (zplus c d) q)))
          False ->
            (case z_zerop d of
               True ->
                 (case z_lt_dec ZERO o1 of
                    True -> Pair (zsgn c) (Pair (Pair a (Pair b (Pair c
                      d))) (NR q))
                    False ->
                      (case z_lt_dec o1 ZERO of
                         True -> Pair (zopp (zsgn c)) (Pair (Pair a
                           (Pair b (Pair c d))) (NR q))
                         False ->
                           qhomographic_sign a (zplus a b) c
                             (zplus c d) q))
               False ->
                 (case inside_interval_1_dec_inf o1 o2 of
                    True -> Pair (POS XH) (Pair (Pair a (Pair b (Pair c
                      d))) (NR q))
                    False ->
                      (case inside_interval_2_dec_inf o1 o2 of
                         True -> Pair (NEG XH) (Pair (Pair a (Pair b
                           (Pair c d))) (NR q))
                         False ->
                           qhomographic_sign a (zplus a b) c
                             (zplus c d) q))))
     DL q ->
       (case z_zerop b of
          True ->
            (case z_zerop d of
               True -> Pair (zmult (zsgn a) (zsgn c)) (Pair (Pair a
                 (Pair b (Pair c d))) (DL q))
               False ->
                 (case z_lt_dec ZERO o2 of
                    True -> Pair (zsgn a) (Pair (Pair a (Pair b (Pair c
                      d))) (DL q))
                    False ->
                      (case z_lt_dec o2 ZERO of
                         True -> Pair (zopp (zsgn a)) (Pair (Pair a
                           (Pair b (Pair c d))) (DL q))
                         False ->
                           qhomographic_sign (zplus a b) b (zplus c d)
                             d q)))
          False ->
            (case z_zerop d of
               True ->
                 (case z_lt_dec ZERO o1 of
                    True -> Pair (zsgn c) (Pair (Pair a (Pair b (Pair c
                      d))) (DL q))
                    False ->
                      (case z_lt_dec o1 ZERO of
                         True -> Pair (zopp (zsgn c)) (Pair (Pair a
                           (Pair b (Pair c d))) (DL q))
                         False ->
                           qhomographic_sign (zplus a b) b (zplus c d)
                             d q))
               False ->
                 (case inside_interval_1_dec_inf o1 o2 of
                    True -> Pair (POS XH) (Pair (Pair a (Pair b (Pair c
                      d))) (DL q))
                    False ->
                      (case inside_interval_2_dec_inf o1 o2 of
                         True -> Pair (NEG XH) (Pair (Pair a (Pair b
                           (Pair c d))) (DL q))
                         False ->
                           qhomographic_sign (zplus a b) b (zplus c d)
                             d q))))
     One ->
       let soorat = zsgn (zplus a b) in
       (case z_eq_dec soorat ZERO of
          True -> Pair ZERO (Pair (Pair a (Pair b (Pair c d))) One)
          False ->
            (case z_eq_dec soorat (zsgn (zplus c d)) of
               True -> Pair (POS XH) (Pair (Pair a (Pair b (Pair c d)))
                 One)
               False -> Pair (NEG XH) (Pair (Pair a (Pair b (Pair c
                 d))) One))))

sg_sign :: Z -> Z -> Z -> Z -> Qpositive -> Maybe Bool
sg_sign a b c d qp =
  case qp of
    NR q ->
      (case z_zerop b of
         True ->
           (case z_zerop d of
              True -> case a of
                     ZERO -> Just True
                     POS _ ->
                       (case c of
                          ZERO -> Just True
                          POS _ -> Just False
                          NEG _ -> Nothing)
                     NEG _ ->
                       (case c of
                          ZERO -> Just True
                          POS _ -> Nothing
                          NEG _ -> Just False)
              False ->
                (case z_lt_dec ZERO (outside_interval c d) of
                   True -> case a of
                          ZERO -> Just True
                          POS _ -> Just False
                          NEG _ -> Nothing
                   False ->
                     (case z_lt_dec (outside_interval c d) ZERO of
                        True -> case a of
                               ZERO -> Just True
                               POS _ -> Nothing
                               NEG _ -> Just False
                        False -> sg_sign a (zplus a b) c (zplus c d) q)))
         False ->
           (case z_zerop d of
              True ->
                (case z_lt_dec ZERO (outside_interval a b) of
                   True -> case c of
                          ZERO -> Just True
                          POS _ -> Just False
                          NEG _ -> Nothing
                   False ->
                     (case z_lt_dec (outside_interval a b) ZERO of
                        True -> case c of
                               ZERO -> Just True
                               POS _ -> Nothing
                               NEG _ -> Just False
                        False -> sg_sign a (zplus a b) c (zplus c d) q))
              False ->
                (case inside_interval_1_dec_inf (outside_interval a b)
                        (outside_interval c d) of
                   True -> Just False
                   False ->
                     (case inside_interval_2_dec_inf
                             (outside_interval a b)
                             (outside_interval c d) of
                        True -> Nothing
                        False -> sg_sign a (zplus a b) c (zplus c d) q))))
    DL q ->
      (case z_zerop b of
         True ->
           (case z_zerop d of
              True -> case a of
                     ZERO -> Just True
                     POS _ ->
                       (case c of
                          ZERO -> Just True
                          POS _ -> Just False
                          NEG _ -> Nothing)
                     NEG _ ->
                       (case c of
                          ZERO -> Just True
                          POS _ -> Nothing
                          NEG _ -> Just False)
              False ->
                (case z_lt_dec ZERO (outside_interval c d) of
                   True -> case a of
                          ZERO -> Just True
                          POS _ -> Just False
                          NEG _ -> Nothing
                   False ->
                     (case z_lt_dec (outside_interval c d) ZERO of
                        True -> case a of
                               ZERO -> Just True
                               POS _ -> Nothing
                               NEG _ -> Just False
                        False -> sg_sign (zplus a b) b (zplus c d) d q)))
         False ->
           (case z_zerop d of
              True ->
                (case z_lt_dec ZERO (outside_interval a b) of
                   True -> case c of
                          ZERO -> Just True
                          POS _ -> Just False
                          NEG _ -> Nothing
                   False ->
                     (case z_lt_dec (outside_interval a b) ZERO of
                        True -> case c of
                               ZERO -> Just True
                               POS _ -> Nothing
                               NEG _ -> Just False
                        False -> sg_sign (zplus a b) b (zplus c d) d q))
              False ->
                (case inside_interval_1_dec_inf (outside_interval a b)
                        (outside_interval c d) of
                   True -> Just False
                   False ->
                     (case inside_interval_2_dec_inf
                             (outside_interval a b)
                             (outside_interval c d) of
                        True -> Nothing
                        False -> sg_sign (zplus a b) b (zplus c d) d q))))
    One ->
      (case z_eq_dec (zsgn (zplus a b)) ZERO of
         True -> Just True
         False ->
           (case z_eq_dec (zsgn (zplus a b)) (zsgn (zplus c d)) of
              True -> Just False
              False -> Nothing))

h_sign :: Z -> Z -> Z -> Z -> Qpositive -> Z
h_sign a b c d p = case qhomographic_sign a b c d p of Pair l1 _l2 -> l1

qpositive_dec_One :: Qpositive -> Bool
qpositive_dec_One p = qpositive_eq_dec p One

top_more_informative :: Z -> Z -> Z -> Z -> Bool
top_more_informative a b c d =
  case quadro_leq_inf a b c d of
    True ->
        case z_le_lt_eq_dec c a of
          True -> True
          False -> z_le_lt_eq_dec d b
    False -> False

qhomographic_Qpositive_to_Qpositive :: Z -> Z -> Z -> Z -> Qpositive -> Qpositive
qhomographic_Qpositive_to_Qpositive a b c d p =
  case qpositive_dec_One p of
    True -> positive_fraction_encoding (zplus a b) (zplus c d)
    False ->
      (case top_more_informative a b c d of
         True -> NR
           (qhomographic_Qpositive_to_Qpositive (zminus a c)
             (zminus b d) c d p)
         False ->
           (case top_more_informative c d a b of
              True -> DL
                (qhomographic_Qpositive_to_Qpositive a b (zminus c a)
                  (zminus d b) p)
              False ->
                (case p of
                   NR q ->
                     qhomographic_Qpositive_to_Qpositive a (zplus a b)
                       c (zplus c d) q
                   DL q ->
                     qhomographic_Qpositive_to_Qpositive (zplus a b) b
                       (zplus c d) d q
                   One -> absurd __)))

new_a, new_b, new_c, new_d :: Z -> Z -> Z -> Z -> Qpositive -> Z
new_a a b c d p = ffst (ffst (ssnd (qhomographic_sign a b c d p)))
new_b a b c d p = ffst (ssnd (ffst (ssnd (qhomographic_sign a b c d p))))
new_c a b c d p = ffst (ssnd (ssnd (ffst (ssnd (qhomographic_sign a b c d p)))))
new_d a b c d p = ssnd (ssnd (ssnd (ffst (ssnd (qhomographic_sign a b c d p)))))

new_p :: Z -> Z -> Z -> Z -> Qpositive -> Qpositive
new_p a b c d p = ssnd (ssnd (qhomographic_sign a b c d p))

qhomographic_Qpositive_to_Q :: Z -> Z -> Z -> Z -> Qpositive -> Q
qhomographic_Qpositive_to_Q a b c d p =
  case z_eq_dec (zmult a d) (zmult b c) of
    True ->
      (case z_zerop d of
         True -> fraction_encoding a c
         False -> fraction_encoding b d)
    False ->
      (case sg_sign a b c d p of
         Just l1_not_minus_one ->
           (case l1_not_minus_one of
              True -> Zero
              False ->
                (case z_lt_dec ZERO
                        (zsgn
                          (zplus (new_a a b c d p) (new_b a b c d p))) of
                   True -> Qpos
                     (qhomographic_Qpositive_to_Qpositive
                       (new_a a b c d p) (new_b a b c d p)
                       (new_c a b c d p) (new_d a b c d p)
                       (new_p a b c d p))
                   False -> Qpos
                     (qhomographic_Qpositive_to_Qpositive
                       (zopp (new_a a b c d p))
                       (zopp (new_b a b c d p))
                       (zopp (new_c a b c d p))
                       (zopp (new_d a b c d p)) (new_p a b c d p))))
         Nothing ->
           (case z_lt_dec
                   (zsgn (zplus (new_a a b c d p) (new_b a b c d p)))
                   ZERO of
              True -> Qneg
                (qhomographic_Qpositive_to_Qpositive
                  (zopp (new_a a b c d p)) (zopp (new_b a b c d p))
                  (new_c a b c d p) (new_d a b c d p)
                  (new_p a b c d p))
              False -> Qneg
                (qhomographic_Qpositive_to_Qpositive (new_a a b c d p)
                  (new_b a b c d p) (zopp (new_c a b c d p))
                  (zopp (new_d a b c d p)) (new_p a b c d p))))

qhomographic :: Z -> Z -> Z -> Z -> Q -> Q
qhomographic a b c d s =
  case s of
    Zero -> fraction_encoding b d
    Qpos p -> qhomographic_Qpositive_to_Q a b c d p
    Qneg p -> qhomographic_Qpositive_to_Q (zopp a) b (zopp c) d p

outside_square :: Z -> Z -> Z -> Z -> Z
outside_square a b c d =
  zplus (zplus (zplus (zsgn a) (zsgn b)) (zsgn c)) (zsgn d)

three_integers_dec_inf :: Z -> Z -> Z -> Bool
three_integers_dec_inf a b c =
  case z_zerop a of
    True -> (case z_zerop b of
               True -> z_zerop c
               False -> False)
    False -> False

inside_square_1_dec_inf, inside_square_2_dec_inf :: Z -> Z -> Bool

inside_square_1_dec_inf o1 o2 =
  case z_lt_dec (POS (XO XH)) o1 of
    True -> z_lt_dec (POS (XO XH)) o2
    False ->
      (case z_lt_dec o1 (NEG (XO XH)) of
         True -> z_lt_dec o2 (NEG (XO XH))
         False -> False)

inside_square_2_dec_inf o1 o2 =
  case z_lt_dec (POS (XO XH)) o1 of
    True -> z_lt_dec o2 (NEG (XO XH))
    False ->
      (case z_lt_dec o1 (NEG (XO XH)) of
         True -> z_lt_dec (POS (XO XH)) o2
         False -> False)

qquadratic_sign
 :: Z -> Z -> Z -> Z -> Z -> Z -> Z -> Z
 -> Qpositive -> Qpositive
 -> Prod
    (Prod
     (Prod Qpositive Qpositive)
     (Prod (Prod (Prod (Prod Z Z) Z) Z) (Prod (Prod (Prod Z Z) Z) Z)))
    Z
qquadratic_sign a b c d e f g h p1 p2 =
  let o1 = outside_square a b c d in
  let o2 = outside_square e f g h in
  (case p1 of
     NR xs ->
       (case p2 of
          NR ys ->
            (case three_integers_dec_inf b c d of
               True ->
                 (case three_integers_dec_inf f g h of
                    True -> Pair (zmult (zsgn a) (zsgn e)) (Pair (Pair
                      (Pair a (Pair b (Pair c d))) (Pair e (Pair f
                      (Pair g h)))) (Pair (NR xs) (NR ys)))
                    False ->
                      (case z_lt_dec (POS (XO XH)) o2 of
                         True -> Pair (zsgn a) (Pair (Pair (Pair a
                           (Pair b (Pair c d))) (Pair e (Pair f (Pair g
                           h)))) (Pair (NR xs) (NR ys)))
                         False ->
                           (case z_lt_dec o2 (NEG (XO XH)) of
                              True -> Pair (zopp (zsgn a)) (Pair (Pair
                                (Pair a (Pair b (Pair c d))) (Pair e
                                (Pair f (Pair g h)))) (Pair (NR xs) (NR
                                ys)))
                              False ->
                                qquadratic_sign a (zplus a b)
                                  (zplus a c)
                                  (zplus (zplus (zplus a b) c) d) e
                                  (zplus e f) (zplus e g)
                                  (zplus (zplus (zplus e f) g) h) xs ys)))
               False ->
                 (case three_integers_dec_inf f g h of
                    True ->
                      (case z_lt_dec (POS (XO XH)) o1 of
                         True -> Pair (zsgn e) (Pair (Pair (Pair a
                           (Pair b (Pair c d))) (Pair e (Pair f (Pair g
                           h)))) (Pair (NR xs) (NR ys)))
                         False ->
                           (case z_lt_dec o1 (NEG (XO XH)) of
                              True -> Pair (zopp (zsgn e)) (Pair (Pair
                                (Pair a (Pair b (Pair c d))) (Pair e
                                (Pair f (Pair g h)))) (Pair (NR xs) (NR
                                ys)))
                              False ->
                                qquadratic_sign a (zplus a b)
                                  (zplus a c)
                                  (zplus (zplus (zplus a b) c) d) e
                                  (zplus e f) (zplus e g)
                                  (zplus (zplus (zplus e f) g) h) xs ys))
                    False ->
                      (case inside_square_1_dec_inf o1 o2 of
                         True -> Pair (POS XH) (Pair (Pair (Pair a
                           (Pair b (Pair c d))) (Pair e (Pair f (Pair g
                           h)))) (Pair (NR xs) (NR ys)))
                         False ->
                           (case inside_square_2_dec_inf o1 o2 of
                              True -> Pair (NEG XH) (Pair (Pair (Pair a
                                (Pair b (Pair c d))) (Pair e (Pair f
                                (Pair g h)))) (Pair (NR xs) (NR ys)))
                              False ->
                                qquadratic_sign a (zplus a b)
                                  (zplus a c)
                                  (zplus (zplus (zplus a b) c) d) e
                                  (zplus e f) (zplus e g)
                                  (zplus (zplus (zplus e f) g) h) xs ys))))
          DL ys ->
            (case three_integers_dec_inf b c d of
               True ->
                 (case three_integers_dec_inf f g h of
                    True -> Pair (zmult (zsgn a) (zsgn e)) (Pair (Pair
                      (Pair a (Pair b (Pair c d))) (Pair e (Pair f
                      (Pair g h)))) (Pair (NR xs) (DL ys)))
                    False ->
                      (case z_lt_dec (POS (XO XH)) o2 of
                         True -> Pair (zsgn a) (Pair (Pair (Pair a
                           (Pair b (Pair c d))) (Pair e (Pair f (Pair g
                           h)))) (Pair (NR xs) (DL ys)))
                         False ->
                           (case z_lt_dec o2 (NEG (XO XH)) of
                              True -> Pair (zopp (zsgn a)) (Pair (Pair
                                (Pair a (Pair b (Pair c d))) (Pair e
                                (Pair f (Pair g h)))) (Pair (NR xs) (DL
                                ys)))
                              False ->
                                qquadratic_sign (zplus a b) b
                                  (zplus (zplus (zplus a b) c) d)
                                  (zplus b d) (zplus e f) f
                                  (zplus (zplus (zplus e f) g) h)
                                  (zplus f h) xs ys)))
               False ->
                 (case three_integers_dec_inf f g h of
                    True ->
                      (case z_lt_dec (POS (XO XH)) o1 of
                         True -> Pair (zsgn e) (Pair (Pair (Pair a
                           (Pair b (Pair c d))) (Pair e (Pair f (Pair g
                           h)))) (Pair (NR xs) (DL ys)))
                         False ->
                           (case z_lt_dec o1 (NEG (XO XH)) of
                              True -> Pair (zopp (zsgn e)) (Pair (Pair
                                (Pair a (Pair b (Pair c d))) (Pair e
                                (Pair f (Pair g h)))) (Pair (NR xs) (DL
                                ys)))
                              False ->
                                qquadratic_sign (zplus a b) b
                                  (zplus (zplus (zplus a b) c) d)
                                  (zplus b d) (zplus e f) f
                                  (zplus (zplus (zplus e f) g) h)
                                  (zplus f h) xs ys))
                    False ->
                      (case inside_square_1_dec_inf o1 o2 of
                         True -> Pair (POS XH) (Pair (Pair (Pair a
                           (Pair b (Pair c d))) (Pair e (Pair f (Pair g
                           h)))) (Pair (NR xs) (DL ys)))
                         False ->
                           (case inside_square_2_dec_inf o1 o2 of
                              True -> Pair (NEG XH) (Pair (Pair (Pair a
                                (Pair b (Pair c d))) (Pair e (Pair f
                                (Pair g h)))) (Pair (NR xs) (DL ys)))
                              False ->
                                qquadratic_sign (zplus a b) b
                                  (zplus (zplus (zplus a b) c) d)
                                  (zplus b d) (zplus e f) f
                                  (zplus (zplus (zplus e f) g) h)
                                  (zplus f h) xs ys))))
          One ->
            let
                 l3 = qhomographic_sign (zplus a b) (zplus c d)
                        (zplus e f) (zplus g h) (NR xs)
            in
            let l2 = ffst (ssnd l3) in
            Pair (ffst l3) (Pair (Pair (Pair ZERO (Pair (ffst l2) (Pair
            ZERO (ffst (ssnd l2))))) (Pair ZERO (Pair
            (ffst (ssnd (ssnd l2))) (Pair ZERO (ssnd (ssnd (ssnd l2)))))))
            (Pair (ssnd (ssnd l3)) One)))
     DL xs ->
       (case p2 of
          NR ys ->
            (case three_integers_dec_inf b c d of
               True ->
                 (case three_integers_dec_inf f g h of
                    True -> Pair (zmult (zsgn a) (zsgn e)) (Pair (Pair
                      (Pair a (Pair b (Pair c d))) (Pair e (Pair f
                      (Pair g h)))) (Pair (DL xs) (NR ys)))
                    False ->
                      (case z_lt_dec (POS (XO XH)) o2 of
                         True -> Pair (zsgn a) (Pair (Pair (Pair a
                           (Pair b (Pair c d))) (Pair e (Pair f (Pair g
                           h)))) (Pair (DL xs) (NR ys)))
                         False ->
                           (case z_lt_dec o2 (NEG (XO XH)) of
                              True -> Pair (zopp (zsgn a)) (Pair (Pair
                                (Pair a (Pair b (Pair c d))) (Pair e
                                (Pair f (Pair g h)))) (Pair (DL xs) (NR
                                ys)))
                              False ->
                                qquadratic_sign (zplus a c)
                                  (zplus (zplus (zplus a b) c) d) c
                                  (zplus c d) (zplus e g)
                                  (zplus (zplus (zplus e f) g) h) g
                                  (zplus g h) xs ys)))
               False ->
                 (case three_integers_dec_inf f g h of
                    True ->
                      (case z_lt_dec (POS (XO XH)) o1 of
                         True -> Pair (zsgn e) (Pair (Pair (Pair a
                           (Pair b (Pair c d))) (Pair e (Pair f (Pair g
                           h)))) (Pair (DL xs) (NR ys)))
                         False ->
                           (case z_lt_dec o1 (NEG (XO XH)) of
                              True -> Pair (zopp (zsgn e)) (Pair (Pair
                                (Pair a (Pair b (Pair c d))) (Pair e
                                (Pair f (Pair g h)))) (Pair (DL xs) (NR
                                ys)))
                              False ->
                                qquadratic_sign (zplus a c)
                                  (zplus (zplus (zplus a b) c) d) c
                                  (zplus c d) (zplus e g)
                                  (zplus (zplus (zplus e f) g) h) g
                                  (zplus g h) xs ys))
                    False ->
                      (case inside_square_1_dec_inf o1 o2 of
                         True -> Pair (POS XH) (Pair (Pair (Pair a
                           (Pair b (Pair c d))) (Pair e (Pair f (Pair g
                           h)))) (Pair (DL xs) (NR ys)))
                         False ->
                           (case inside_square_2_dec_inf o1 o2 of
                              True -> Pair (NEG XH) (Pair (Pair (Pair a
                                (Pair b (Pair c d))) (Pair e (Pair f
                                (Pair g h)))) (Pair (DL xs) (NR ys)))
                              False ->
                                qquadratic_sign (zplus a c)
                                  (zplus (zplus (zplus a b) c) d) c
                                  (zplus c d) (zplus e g)
                                  (zplus (zplus (zplus e f) g) h) g
                                  (zplus g h) xs ys))))
          DL ys ->
            (case three_integers_dec_inf b c d of
               True ->
                 (case three_integers_dec_inf f g h of
                    True -> Pair (zmult (zsgn a) (zsgn e)) (Pair (Pair
                      (Pair a (Pair b (Pair c d))) (Pair e (Pair f
                      (Pair g h)))) (Pair (DL xs) (DL ys)))
                    False ->
                      (case z_lt_dec (POS (XO XH)) o2 of
                         True -> Pair (zsgn a) (Pair (Pair (Pair a
                           (Pair b (Pair c d))) (Pair e (Pair f (Pair g
                           h)))) (Pair (DL xs) (DL ys)))
                         False ->
                           (case z_lt_dec o2 (NEG (XO XH)) of
                              True -> Pair (zopp (zsgn a)) (Pair (Pair
                                (Pair a (Pair b (Pair c d))) (Pair e
                                (Pair f (Pair g h)))) (Pair (DL xs) (DL
                                ys)))
                              False ->
                                qquadratic_sign
                                  (zplus (zplus (zplus a b) c) d)
                                  (zplus b d) (zplus c d) d
                                  (zplus (zplus (zplus e f) g) h)
                                  (zplus f h) (zplus g h) h xs ys)))
               False ->
                 (case three_integers_dec_inf f g h of
                    True ->
                      (case z_lt_dec (POS (XO XH)) o1 of
                         True -> Pair (zsgn e) (Pair (Pair (Pair a
                           (Pair b (Pair c d))) (Pair e (Pair f (Pair g
                           h)))) (Pair (DL xs) (DL ys)))
                         False ->
                           (case z_lt_dec o1 (NEG (XO XH)) of
                              True -> Pair (zopp (zsgn e)) (Pair (Pair
                                (Pair a (Pair b (Pair c d))) (Pair e
                                (Pair f (Pair g h)))) (Pair (DL xs) (DL
                                ys)))
                              False ->
                                qquadratic_sign
                                  (zplus (zplus (zplus a b) c) d)
                                  (zplus b d) (zplus c d) d
                                  (zplus (zplus (zplus e f) g) h)
                                  (zplus f h) (zplus g h) h xs ys))
                    False ->
                      (case inside_square_1_dec_inf o1 o2 of
                         True -> Pair (POS XH) (Pair (Pair (Pair a
                           (Pair b (Pair c d))) (Pair e (Pair f (Pair g
                           h)))) (Pair (DL xs) (DL ys)))
                         False ->
                           (case inside_square_2_dec_inf o1 o2 of
                              True -> Pair (NEG XH) (Pair (Pair (Pair a
                                (Pair b (Pair c d))) (Pair e (Pair f
                                (Pair g h)))) (Pair (DL xs) (DL ys)))
                              False ->
                                qquadratic_sign
                                  (zplus (zplus (zplus a b) c) d)
                                  (zplus b d) (zplus c d) d
                                  (zplus (zplus (zplus e f) g) h)
                                  (zplus f h) (zplus g h) h xs ys))))
          One ->
            let
                 l3 = qhomographic_sign (zplus a b) (zplus c d)
                        (zplus e f) (zplus g h) (DL xs)
            in
            let l2 = ffst (ssnd l3) in
            Pair (ffst l3) (Pair (Pair (Pair ZERO (Pair (ffst l2) (Pair
            ZERO (ffst (ssnd l2))))) (Pair ZERO (Pair
            (ffst (ssnd (ssnd l2))) (Pair ZERO (ssnd (ssnd (ssnd l2)))))))
            (Pair (ssnd (ssnd l3)) One)))
     One ->
       let
            l3 = qhomographic_sign (zplus a c) (zplus b d) (zplus e g)
                   (zplus f h) p2
       in
       let l2 = ffst (ssnd l3) in
       Pair (ffst l3) (Pair (Pair (Pair ZERO (Pair ZERO (Pair (ffst l2)
       (ffst (ssnd l2))))) (Pair ZERO (Pair ZERO (Pair
       (ffst (ssnd (ssnd l2))) (ssnd (ssnd (ssnd l2))))))) (Pair One
       (ssnd (ssnd l3)))))

qquadratic_sign_sign :: Z -> Z -> Z -> Z -> Z -> Z -> Z -> Z -> Qpositive -> Qpositive -> Maybe Bool
qquadratic_sign_sign a b c d e f g h p1 p2 =
  case p1 of
    NR p ->
      (case p2 of
         NR p0 ->
           (case three_integers_dec_inf b c d of
              True ->
                (case three_integers_dec_inf f g h of
                   True -> zsgn_1 (zmult a e)
                   False ->
                     (case z_lt_dec (POS (XO XH))
                             (outside_square e f g h) of
                        True -> zsgn_1 a
                        False ->
                          (case z_lt_dec (outside_square e f g h) (NEG
                                  (XO XH)) of
                             True -> zsgn_1 (zopp a)
                             False -> qquadratic_sign_sign a (zplus a b)
                                   (zplus a c)
                                   (zplus (zplus (zplus a b) c) d) e
                                   (zplus e f) (zplus e g)
                                   (zplus (zplus (zplus e f) g) h) p
                                   p0)))
              False ->
                (case three_integers_dec_inf f g h of
                   True ->
                     (case z_lt_dec (POS (XO XH))
                             (outside_square a b c d) of
                        True -> zsgn_1 e
                        False ->
                          (case z_lt_dec (outside_square a b c d) (NEG
                                  (XO XH)) of
                             True -> zsgn_1 (zopp e)
                             False -> qquadratic_sign_sign a (zplus a b)
                                   (zplus a c)
                                   (zplus (zplus (zplus a b) c) d) e
                                   (zplus e f) (zplus e g)
                                   (zplus (zplus (zplus e f) g) h) p
                                   p0))
                   False ->
                     (case inside_square_1_dec_inf
                             (outside_square a b c d)
                             (outside_square e f g h) of
                        True -> Just False
                        False ->
                          (case inside_square_2_dec_inf
                                  (outside_square a b c d)
                                  (outside_square e f g h) of
                             True -> Nothing
                             False -> qquadratic_sign_sign a (zplus a b)
                                   (zplus a c)
                                   (zplus (zplus (zplus a b) c) d) e
                                   (zplus e f) (zplus e g)
                                   (zplus (zplus (zplus e f) g) h) p
                                   p0))))
         DL p0 ->
           (case three_integers_dec_inf b c d of
              True ->
                (case three_integers_dec_inf f g h of
                   True -> zsgn_1 (zmult a e)
                   False ->
                     (case z_lt_dec (POS (XO XH))
                             (outside_square e f g h) of
                        True -> zsgn_1 a
                        False ->
                          (case z_lt_dec (outside_square e f g h) (NEG
                                  (XO XH)) of
                             True -> zsgn_1 (zopp a)
                             False -> qquadratic_sign_sign (zplus a b) b
                                   (zplus (zplus (zplus a b) c) d)
                                   (zplus b d) (zplus e f) f
                                   (zplus (zplus (zplus e f) g) h)
                                   (zplus f h) p p0)))
              False ->
                (case three_integers_dec_inf f g h of
                   True ->
                     (case z_lt_dec (POS (XO XH))
                             (outside_square a b c d) of
                        True -> zsgn_1 e
                        False ->
                          (case z_lt_dec (outside_square a b c d) (NEG
                                  (XO XH)) of
                             True -> zsgn_1 (zopp e)
                             False -> qquadratic_sign_sign (zplus a b) b
                                   (zplus (zplus (zplus a b) c) d)
                                   (zplus b d) (zplus e f) f
                                   (zplus (zplus (zplus e f) g) h)
                                   (zplus f h) p p0))
                   False ->
                     (case inside_square_1_dec_inf
                             (outside_square a b c d)
                             (outside_square e f g h) of
                        True -> Just False
                        False ->
                          (case inside_square_2_dec_inf
                                  (outside_square a b c d)
                                  (outside_square e f g h) of
                             True -> Nothing
                             False -> qquadratic_sign_sign (zplus a b) b
                                   (zplus (zplus (zplus a b) c) d)
                                   (zplus b d) (zplus e f) f
                                   (zplus (zplus (zplus e f) g) h)
                                   (zplus f h) p p0))))
         One -> sg_sign (zplus a b) (zplus c d) (zplus e f) (zplus g h) (NR p))
    DL p ->
      (case p2 of
         NR p0 ->
           (case three_integers_dec_inf b c d of
              True ->
                (case three_integers_dec_inf f g h of
                   True -> zsgn_1 (zmult a e)
                   False ->
                     (case z_lt_dec (POS (XO XH))
                             (outside_square e f g h) of
                        True -> zsgn_1 a
                        False ->
                          (case z_lt_dec (outside_square e f g h) (NEG
                                  (XO XH)) of
                             True -> zsgn_1 (zopp a)
                             False -> qquadratic_sign_sign (zplus a c)
                                   (zplus (zplus (zplus a b) c) d) c
                                   (zplus c d) (zplus e g)
                                   (zplus (zplus (zplus e f) g) h) g
                                   (zplus g h) p p0)))
              False ->
                (case three_integers_dec_inf f g h of
                   True ->
                     (case z_lt_dec (POS (XO XH))
                             (outside_square a b c d) of
                        True -> zsgn_1 e
                        False ->
                          (case z_lt_dec (outside_square a b c d) (NEG
                                  (XO XH)) of
                             True -> zsgn_1 (zopp e)
                             False -> qquadratic_sign_sign (zplus a c)
                                   (zplus (zplus (zplus a b) c) d) c
                                   (zplus c d) (zplus e g)
                                   (zplus (zplus (zplus e f) g) h) g
                                   (zplus g h) p p0))
                   False ->
                     (case inside_square_1_dec_inf
                             (outside_square a b c d)
                             (outside_square e f g h) of
                        True -> Just False
                        False ->
                          (case inside_square_2_dec_inf
                                  (outside_square a b c d)
                                  (outside_square e f g h) of
                             True -> Nothing
                             False -> qquadratic_sign_sign (zplus a c)
                                   (zplus (zplus (zplus a b) c) d) c
                                   (zplus c d) (zplus e g)
                                   (zplus (zplus (zplus e f) g) h) g
                                   (zplus g h) p p0))))
         DL p0 ->
           (case three_integers_dec_inf b c d of
              True ->
                (case three_integers_dec_inf f g h of
                   True -> zsgn_1 (zmult a e)
                   False ->
                     (case z_lt_dec (POS (XO XH))
                             (outside_square e f g h) of
                        True -> zsgn_1 a
                        False ->
                          (case z_lt_dec (outside_square e f g h) (NEG
                                  (XO XH)) of
                             True -> zsgn_1 (zopp a)
                             False -> qquadratic_sign_sign
                                   (zplus (zplus (zplus a b) c) d)
                                   (zplus b d) (zplus c d) d
                                   (zplus (zplus (zplus e f) g) h)
                                   (zplus f h) (zplus g h) h p p0 )))
              False ->
                (case three_integers_dec_inf f g h of
                   True ->
                     (case z_lt_dec (POS (XO XH))
                             (outside_square a b c d) of
                        True -> zsgn_1 e
                        False ->
                          (case z_lt_dec (outside_square a b c d) (NEG
                                  (XO XH)) of
                             True -> zsgn_1 (zopp e)
                             False -> qquadratic_sign_sign
                                   (zplus (zplus (zplus a b) c) d)
                                   (zplus b d) (zplus c d) d
                                   (zplus (zplus (zplus e f) g) h)
                                   (zplus f h) (zplus g h) h p p0))
                   False ->
                     (case inside_square_1_dec_inf
                             (outside_square a b c d)
                             (outside_square e f g h) of
                        True -> Just False
                        False ->
                          (case inside_square_2_dec_inf
                                  (outside_square a b c d)
                                  (outside_square e f g h) of
                             True -> Nothing
                             False -> qquadratic_sign_sign
                                   (zplus (zplus (zplus a b) c) d)
                                   (zplus b d) (zplus c d) d
                                   (zplus (zplus (zplus e f) g) h)
                                   (zplus f h) (zplus g h) h p p0))))
         One -> sg_sign (zplus a b) (zplus c d) (zplus e f) (zplus g h) (DL p))
    One -> sg_sign (zplus a c) (zplus b d) (zplus e g) (zplus f h) p2

octo_leq_inf, quadratic_top_more_informative, same_ratio_dec_inf :: Z -> Z -> Z -> Z -> Z -> Z -> Z -> Z -> Bool

octo_leq_inf a b c d e f g h =
  case z_le_dec e a of
    True ->
      (case z_le_dec f b of
         True ->
           (case z_le_dec g c of
              True -> z_le_dec h d
              False -> False)
         False -> False)
    False -> False

quadratic_top_more_informative a b c d e f g h =
  case octo_leq_inf a b c d e f g h of
    True ->
      (case z_le_lt_eq_dec e a of
         True -> True
         False ->
           (case z_le_lt_eq_dec f b of
              True -> True
              False ->
                (case z_le_lt_eq_dec g c of
                   True -> True
                   False -> z_le_lt_eq_dec h d)))
    False -> False

qquadratic_Qpositive_to_Qpositive :: Z -> Z -> Z -> Z -> Z -> Z -> Z -> Z -> Qpositive -> Qpositive -> Qpositive
qquadratic_Qpositive_to_Qpositive a b c d e f g h p1 p2 =
  case qpositive_dec_One p1 of
    True ->
      qhomographic_Qpositive_to_Qpositive (zplus a c) (zplus b d)
        (zplus e g) (zplus f h) p2
    False ->
      (case qpositive_dec_One p2 of
         True ->
           qhomographic_Qpositive_to_Qpositive (zplus a b) (zplus c d)
             (zplus e f) (zplus g h) p1
         False ->
           (case quadratic_top_more_informative a b c d e f g h of
              True -> NR
                (qquadratic_Qpositive_to_Qpositive (zminus a e)
                  (zminus b f) (zminus c g) (zminus d h) e f g h p1 p2)
              False ->
                (case quadratic_top_more_informative e f g h a b c d of
                   True -> DL
                     (qquadratic_Qpositive_to_Qpositive a b c d
                       (zminus e a) (zminus f b) (zminus g c)
                       (zminus h d) p1 p2)
                   False ->
                     (case p1 of
                        NR x ->
                          (case p2 of
                             NR ys ->
                               qquadratic_Qpositive_to_Qpositive a
                                 (zplus a b) (zplus a c)
                                 (zplus (zplus (zplus a b) c) d) e
                                 (zplus e f) (zplus e g)
                                 (zplus (zplus (zplus e f) g) h) x ys
                             DL ys ->
                               qquadratic_Qpositive_to_Qpositive
                                 (zplus a b) b
                                 (zplus (zplus (zplus a b) c) d)
                                 (zplus b d) (zplus e f) f
                                 (zplus (zplus (zplus e f) g) h)
                                 (zplus f h) x ys
                             One -> absurd __ x __)
                        DL x ->
                          (case p2 of
                             NR ys ->
                               qquadratic_Qpositive_to_Qpositive
                                 (zplus a c)
                                 (zplus (zplus (zplus a b) c) d) c
                                 (zplus c d) (zplus e g)
                                 (zplus (zplus (zplus e f) g) h) g
                                 (zplus g h) x ys
                             DL ys ->
                               qquadratic_Qpositive_to_Qpositive
                                 (zplus (zplus (zplus a b) c) d)
                                 (zplus b d) (zplus c d) d
                                 (zplus (zplus (zplus e f) g) h)
                                 (zplus f h) (zplus g h) h x ys
                             One -> absurd __ x __)
                        One -> absurd __))))

same_ratio_dec_inf a b c d e f g h =
  case z_eq_dec (zmult a f) (zmult b e) of
    True ->
      (case z_eq_dec (zmult b g) (zmult c f) of
         True ->
           (case z_eq_dec (zmult c h) (zmult d g) of
              True ->
                (case z_eq_dec (zmult a g) (zmult c e) of
                   True ->
                     (case z_eq_dec (zmult a h) (zmult d e) of
                        True -> z_eq_dec (zmult b h) (zmult d f)
                        False -> False)
                   False -> False)
              False -> False)
         False -> False)
    False -> False

qnew_a, qnew_b, qnew_c, qnew_d, qnew_e, qnew_f, qnew_g, qnew_h :: Z -> Z -> Z -> Z -> Z -> Z -> Z -> Z -> Qpositive -> Qpositive -> Z
qnew_p1, qnew_p2 :: Z -> Z -> Z -> Z -> Z -> Z -> Z -> Z -> Qpositive -> Qpositive -> Qpositive

qnew_a a b c d e f g h p1 p2 =
  ffst (ffst (ffst (ssnd (qquadratic_sign a b c d e f g h p1 p2))))

qnew_b a b c d e f g h p1 p2 =
  ffst (ssnd (ffst (ffst (ssnd (qquadratic_sign a b c d e f g h p1 p2)))))

qnew_c a b c d e f g h p1 p2 =
  ffst
    (ssnd
      (ssnd (ffst (ffst (ssnd (qquadratic_sign a b c d e f g h p1 p2))))))

qnew_d a b c d e f g h p1 p2 =
  ssnd
    (ssnd
      (ssnd (ffst (ffst (ssnd (qquadratic_sign a b c d e f g h p1 p2))))))

qnew_e a b c d e f g h p1 p2 =
  ffst (ssnd (ffst (ssnd (qquadratic_sign a b c d e f g h p1 p2))))

qnew_f a b c d e f g h p1 p2 =
  ffst (ssnd (ssnd (ffst (ssnd (qquadratic_sign a b c d e f g h p1 p2)))))

qnew_g a b c d e f g h p1 p2 =
  ffst
    (ssnd
      (ssnd (ssnd (ffst (ssnd (qquadratic_sign a b c d e f g h p1 p2))))))

qnew_h a b c d e f g h p1 p2 =
  ssnd
    (ssnd
      (ssnd (ssnd (ffst (ssnd (qquadratic_sign a b c d e f g h p1 p2))))))

qnew_p1 a b c d e f g h p1 p2 =
  ffst (ssnd (ssnd (qquadratic_sign a b c d e f g h p1 p2)))

qnew_p2 a b c d e f g h p1 p2 =
  ssnd (ssnd (ssnd (qquadratic_sign a b c d e f g h p1 p2)))

qquadratic_sg_denom_nonzero_nonzero_inf :: Z -> Z -> Z -> Z -> p1 -> p2 -> Maybe (Maybe Bool)
qquadratic_sg_denom_nonzero_nonzero_inf e f g h _ _ =
  case z_zerop e of
    True ->
      (case z_zerop f of
         True ->
           (case z_zerop g of
              True ->
                (case z_zerop h of
                   True -> absurd __
                   False -> Nothing)
              False -> Just Nothing)
         False -> Just (Just False))
    False -> Just (Just True)

qquadratic_Qpositive_to_Q :: Z -> Z -> Z -> Z -> Z -> Z -> Z -> Z -> Qpositive -> Qpositive -> Q
qquadratic_Qpositive_to_Q a b c d e f g h p1 p2 =
  case same_ratio_dec_inf a b c d e f g h of
    True ->
      (case qquadratic_sg_denom_nonzero_nonzero_inf e f g h p1 p2 of
         Just s ->
           (case s of
              Just s0 ->
                (case s0 of
                   True -> fraction_encoding a e
                   False -> fraction_encoding b f)
              Nothing -> fraction_encoding c g)
         Nothing -> fraction_encoding d h)
    False ->
      (case qquadratic_sign_sign a b c d e f g h p1 p2 of
         Just s ->
           (case s of
              True -> Zero
              False ->
                (case zsgn_1
                        (zplus
                          (zplus
                            (zplus (qnew_a a b c d e f g h p1 p2)
                              (qnew_b a b c d e f g h p1 p2))
                            (qnew_c a b c d e f g h p1 p2))
                          (qnew_d a b c d e f g h p1 p2)) of
                   Just s0 ->
                     (case s0 of
                        True -> absurd __
                        False -> Qpos
                          (qquadratic_Qpositive_to_Qpositive
                            (qnew_a a b c d e f g h p1 p2)
                            (qnew_b a b c d e f g h p1 p2)
                            (qnew_c a b c d e f g h p1 p2)
                            (qnew_d a b c d e f g h p1 p2)
                            (qnew_e a b c d e f g h p1 p2)
                            (qnew_f a b c d e f g h p1 p2)
                            (qnew_g a b c d e f g h p1 p2)
                            (qnew_h a b c d e f g h p1 p2)
                            (qnew_p1 a b c d e f g h p1 p2)
                            (qnew_p2 a b c d e f g h p1 p2)))
                   Nothing -> Qpos
                     (qquadratic_Qpositive_to_Qpositive
                       (zopp (qnew_a a b c d e f g h p1 p2))
                       (zopp (qnew_b a b c d e f g h p1 p2))
                       (zopp (qnew_c a b c d e f g h p1 p2))
                       (zopp (qnew_d a b c d e f g h p1 p2))
                       (zopp (qnew_e a b c d e f g h p1 p2))
                       (zopp (qnew_f a b c d e f g h p1 p2))
                       (zopp (qnew_g a b c d e f g h p1 p2))
                       (zopp (qnew_h a b c d e f g h p1 p2))
                       (qnew_p1 a b c d e f g h p1 p2)
                       (qnew_p2 a b c d e f g h p1 p2))))
         Nothing ->
           (case zsgn_1
                   (zplus
                     (zplus
                       (zplus (qnew_a a b c d e f g h p1 p2)
                         (qnew_b a b c d e f g h p1 p2))
                       (qnew_c a b c d e f g h p1 p2))
                     (qnew_d a b c d e f g h p1 p2)) of
              Just s ->
                (case s of
                   True -> absurd __
                   False -> Qneg
                     (qquadratic_Qpositive_to_Qpositive
                       (qnew_a a b c d e f g h p1 p2)
                       (qnew_b a b c d e f g h p1 p2)
                       (qnew_c a b c d e f g h p1 p2)
                       (qnew_d a b c d e f g h p1 p2)
                       (zopp (qnew_e a b c d e f g h p1 p2))
                       (zopp (qnew_f a b c d e f g h p1 p2))
                       (zopp (qnew_g a b c d e f g h p1 p2))
                       (zopp (qnew_h a b c d e f g h p1 p2))
                       (qnew_p1 a b c d e f g h p1 p2)
                       (qnew_p2 a b c d e f g h p1 p2)))
              Nothing -> Qneg
                (qquadratic_Qpositive_to_Qpositive
                  (zopp (qnew_a a b c d e f g h p1 p2))
                  (zopp (qnew_b a b c d e f g h p1 p2))
                  (zopp (qnew_c a b c d e f g h p1 p2))
                  (zopp (qnew_d a b c d e f g h p1 p2))
                  (qnew_e a b c d e f g h p1 p2)
                  (qnew_f a b c d e f g h p1 p2)
                  (qnew_g a b c d e f g h p1 p2)
                  (qnew_h a b c d e f g h p1 p2)
                  (qnew_p1 a b c d e f g h p1 p2)
                  (qnew_p2 a b c d e f g h p1 p2))))

qquadratic :: Z -> Z -> Z -> Z -> Z -> Z -> Z -> Z -> Q -> Q -> Q
qquadratic a b c d e f g h s1 s2 =
  case s1 of
    Zero -> qhomographic c d g h s2
    Qpos p1 ->
      (case s2 of
         Zero -> qhomographic b d f h (Qpos p1)
         Qpos p2 -> qquadratic_Qpositive_to_Q a b c d e f g h p1 p2
         Qneg p2 ->
           qquadratic_Qpositive_to_Q (zopp a) b (zopp c) d (zopp e) f
             (zopp g) h p1 p2)
    Qneg p1 ->
      (case s2 of
         Zero -> qhomographic b d f h (Qneg p1)
         Qpos p2 ->
           qquadratic_Qpositive_to_Q (zopp a) (zopp b) c d (zopp e)
             (zopp f) g h p1 p2
         Qneg p2 ->
           qquadratic_Qpositive_to_Q a (zopp b) (zopp c) d e (zopp f)
             (zopp g) h p1 p2)



-- Upto here was generated using ^Coq> Extraction "quadratic" Qquadratic^ in Coq
-- Now we add pretty printing facilities

instance Show Qpositive where
    show = \ case
        One -> ""
        DL p' -> 'L':show p'
        NR p' -> 'R':show p'

instance Show Q where
    show = \ case
         Zero -> "0"
         Qpos p' -> show p'
         Qneg p' -> '-':show p'


nattoPos :: Integral a => a -> Positive
nattoPos x
  | 1 == x       = XH
  | 1 == mod x 2 = XI (nattoPos (div x 2))
  | otherwise    = XO (nattoPos (div x 2))

toZ :: Integral a => a -> Z
toZ x = case compare x 0 of
    EQ -> ZERO
    GT -> POS (nattoPos x)
    LT -> NEG (nattoPos (negate x))

instance Read Qpositive where
    readPrec = ReadPrec.lift $
        foldr id One <$> many (DL <$ ReadP.char 'L' <|> NR <$ ReadP.char 'R')

instance Read Q where
    readPrec = ReadPrec.readP_to_Prec $ \ prec ->
        Zero <$ ReadP.char '0' <|>
        fromMaybe Qpos <$> optional (Qneg <$ ReadP.char '-' <|> Qpos <$ ReadP.char '+')
                       <*> ReadPrec.readPrec_to_P readPrec prec

fraction_encoding_ :: (Integral a, Integral b) => a -> b -> [Char]
fraction_encoding_ x y = show (fraction_encoding (toZ x) (toZ y))

qhomographic_, qhomographic_Qpositive_to_Qpositive_
 :: (Integral a, Integral b, Integral c, Integral d)
 => a -> b -> c -> d -> [Char] -> [Char]
qhomographic_Qpositive_to_Qpositive_ a b c d p = show (qhomographic_Qpositive_to_Qpositive (toZ a) (toZ b) (toZ c) (toZ d) (read p))
qhomographic_ a b c d x = show (qhomographic (toZ a) (toZ b) (toZ c) (toZ d) (read x))

qquadratic_, qquadratic_Qpositive_to_Qpositive_
 :: (Integral a, Integral b, Integral c, Integral d, Integral e, Integral f, Integral g, Integral h)
 => a -> b -> c -> d -> e -> f -> g -> h -> [Char] -> [Char] -> [Char]
qquadratic_Qpositive_to_Qpositive_ a b c d e f g h p1 p2 = show (qquadratic_Qpositive_to_Qpositive (toZ a) (toZ b) (toZ c) (toZ d) (toZ e) (toZ f) (toZ g) (toZ h) (read p1) (read p2))
qquadratic_ a b c d e f g h x y = show (qquadratic (toZ a) (toZ b) (toZ c) (toZ d) (toZ e) (toZ f) (toZ g) (toZ h) (read x) (read y))

lazy_plus_, lazy_mult_, lazy_minus_, lazy_div_ :: [Char] -> [Char] -> [Char]
lazy_plus_ = qquadratic_ 0 1 1 0 0 0 0 1
lazy_mult_ = qquadratic_ 1 0 0 0 0 0 0 1
lazy_minus_ = qquadratic_ 0 1 (-1) 0 0 0 0 1
lazy_div_ = qquadratic_ 0 1 0 0 0 0 1 0
